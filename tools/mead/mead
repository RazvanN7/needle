#!/usr/bin/python

import networkx as nx
import pprint 
import sys

pp = pprint.PrettyPrinter(indent=2)
data = {}
data['num-added-edges'] = 0
data['num-orig-edges'] = 0

def add_edges(dfg, aa_edges):
    global pp
    for (src,dst) in aa_edges:
        if dst not in nx.dfs_postorder_nodes(dfg, src):
            dfg.add_edge(src, dst, {'color' : 'red'})
            data['num-added-edges'] += 1 


def write_dfg(dfgfile, dfg):
    nx.drawing.nx_agraph.write_dot(dfg, 'mead.'+dfgfile)


def main(dfgfile, aafile):
    global pp
    dfg = nx.DiGraph(nx.drawing.nx_agraph.read_dot(dfgfile))
    assert nx.algorithms.is_directed_acyclic_graph(dfg) 
    data['num-dataflow-edges'] = nx.number_of_edges(dfg)
    aa = set() 
    with open(aafile, 'r') as f:
        for l in f:
            s = l.strip().split()
            aa.add((s[0],s[1]))
    data['num-orig-edges'] = len(aa)
    add_edges(dfg, aa)
    write_dfg(dfgfile, dfg)

def dump_stats():
    global data
    with open('mead.graph.stats.txt', 'w') as f:
        for k,v in data.iteritems():
            f.write(' '.join([k,str(v),'\n']))


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
    dump_stats()
